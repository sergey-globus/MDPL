STK SEGMENT PARA STACK 'STACK' ; †††
	DB 100 DUP(0)
STK ENDS

DSEG SEGMENT PARA PUBLIC 'DATA'
	MSG1 		DB "Input matrix size: $"
	MSG3 		DB "Input elements of 1 matrix: $"
	MSG4 		DB "Input elements of 2 matrix: $"
	MSG5 		DB "Result matrix: $"
	MSG6		DB "Error $"
	SPACE		DB " $"
	ROWS 		DB ?
	COLUMNS 	DB ?
	ENDL 		DB 13, 10, '$'
	MTR1 		DB 81 DUP(0)
	MTR2 		DB 81 DUP(0)
	MTR3		DB 81 DUP(0)
	I		DB ?
	J		DB ?
	C1		DW ? 
	C2		DW ?
DSEG ENDS

CSEG SEGMENT PARA PUBLIC 'CODE'
	assume CS:CSEG, DS:DSEG, SS:STK
INPUT_SYMBOL:
	MOV AH, 1
	INT 21H
	SUB AL, '0'
	RET

PRINT_SYMBOL:
	ADD DL, '0'
	MOV AH, 2
	INT 21H
	RET
	
QUIT:
	LEA DX, MSG6
	MOV AH, 9
	INT 21H
	MOV AH, 4CH
	INT 21H

INPUT_MTR:	
	MOV SI, 0
	MOV CL, ROWS
	INPUT_ROW:
		MOV I, CL
		MOV CL, COLUMNS
		INPUT_ELEMS:
			CALL INPUT_SYMBOL
			MOV DS:[BX[SI]], AL
			INC SI
			LEA DX, SPACE
			MOV AH, 9
			INT 21H
			LOOP INPUT_ELEMS
		LEA DX, ENDL
		MOV AH, 9
		INT 21H

		MOV CL, 9
		SUB CL, COLUMNS
		SKIP:
		CMP CL, 0
		JE NEXT
		INC SI
		DEC CL
		JMP SKIP
		NEXT:
		MOV CL, I
		LOOP INPUT_ROW
	RET

READ_SIZE:
	LEA DX, MSG1
	MOV AH, 9
	INT 21H
	CALL INPUT_SYMBOL
	MOV ROWS, AL
	MOV COLUMNS, AL
	LEA DX, ENDL
	MOV AH, 9
	INT 21H
	RET

MTR_MUL:
	LEA DX, MSG5
	MOV AH, 9
	INT 21H
	LEA DX, ENDL
	MOV AH, 9
	INT 21H

	MOV SI, 0
	MOV CL, ROWS
	ROW_MUL:
		MOV I, CL
		MOV CL, COLUMNS
		COLUMNS_MUL:
			MOV J, CL
			
			MOV AX, SI
			MOV CL, 9
			DIV CL

			MOV BL, AL
			MOV BH, AH
			MOV AX, 0
			MOV AL, BH
			MUL CL
			ADD AL, BL

			MOV DI, AX

			MOV BL, MTR1[DI]
			MOV MTR3[SI], BL
				
			MOV DL, MTR3[SI]
			CALL PRINT_SYMBOL

			LEA DX, SPACE
			MOV AH, 9
			INT 21H
			INC SI
			MOV CL, J
			LOOP COLUMNS_MUL
		LEA DX, ENDL
		MOV AH, 9
		INT 21H

		MOV CL, 9
		SUB CL, COLUMNS
		SKIP_MUL:
		CMP CL, 0
		JE NEXT_MUL
		INC SI
		DEC CL
		JMP SKIP_MUL
		NEXT_MUL:
		MOV CL, I
		LOOP ROW_MUL
	RET
MAIN:
	MOV AX, DSEG
	MOV DS, AX

	CALL READ_SIZE
	CMP ROWS, 0
	JE QUIT
	CMP COLUMNS, 0
	JE QUIT

	LEA DX, MSG3
	MOV AH, 9
	INT 21H
	LEA DX, ENDL
	MOV AH, 9
	INT 21H
	MOV BX, OFFSET MTR1
	CALL INPUT_MTR

	CALL MTR_MUL
	MOV AH, 4CH
	INT 21H
CSEG ENDS
END MAIN
   